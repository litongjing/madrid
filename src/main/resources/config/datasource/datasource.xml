<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd"
       default-autowire="byName">

    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${ds.driver}"/>
        <property name="url" value="${ds.url}"/>
        <property name="username" value="${ds.username}"/>
        <property name="password" value="${ds.password}"/>
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="10"/>
        <property name="maxActive" value="30"/>
        <property name="testWhileIdle" value="true"/>
        <property name="validationQuery" value="select 1 from dual"/>
        <property name="testOnBorrow" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="maxWait" value="5000"/>
        <property name="minEvictableIdleTimeMillis" value="30000"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100"/>

        <property name="filters" value="config,stat"/>
    </bean>

    <!--<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
    <!--<property name="driverClassName" value="${ds.driver}"/>-->
    <!--<property name="url" value="${ds.url}"/>-->
    <!--<property name="username" value="${ds.username}"/>-->
    <!--<property name="password" value="${ds.password}"/>-->
    <!--<property name="initialSize" value="5"/>-->
    <!--<property name="minIdle" value="10"/>-->
    <!--<property name="maxActive" value="30"/>-->
    <!--<property name="testWhileIdle" value="true"/>-->
    <!--<property name="validationQuery" value="select 1 from dual"/>-->
    <!--<property name="testOnBorrow" value="true"/>-->
    <!--<property name="testOnReturn" value="false"/>-->
    <!--<property name="maxWait" value="5000"/>-->
    <!--<property name="minEvictableIdleTimeMillis" value="30000"/>-->
    <!--<property name="timeBetweenEvictionRunsMillis" value="30000"/>-->
    <!--&lt;!&ndash;要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 &ndash;&gt;-->
    <!--&lt;!&ndash;是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。 &ndash;&gt;-->
    <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="100"/>-->

    <!--<property name="filters" value="config,stat"/>-->
    <!--</bean>-->

    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://47.97.175.43:3306/campnou"/>
        <property name="username" value="root"/>
        <property name="password" value="littleLITTLE08()"/>
        <property name="maxActive" value="20"/>
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxWait" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'z'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
    </bean>

    <bean id="dataSourceD" class="com.util.DynamicDataSource" primary="true">
        <property name="targetDataSources">
            <map key-type="java.lang.String">
                <entry key="coupon" value-ref="dataSource1"/>
                <entry key="campnou" value-ref="dataSource2"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="dataSource1"/>
    </bean>

    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceD"/>
        <!--打包jar typeAliasePackage扫描有问题-->
        <!--<property name="typeAliasesPackage" value="com.domain.DO"/>-->
        <property name="mapperLocations" value="classpath:config/mybatis/mapper/*mapper.xml"/>
        <property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"></property>
    </bean>
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceD"/>
    </bean>

    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
        <!--TransactionDefinition.ISOLATION_READ_COMMITTED-->
        <property name="isolationLevel" value="2"/>
        <!--TransactionDefinition.PROPAGATION_REQUIRED-->
        <property name="propagationBehavior" value="0"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--ibatis-->
    <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <!-- 此处应注入ibatis配置文件，而非sqlMap文件，否则会出现“there is no statement.....异常” -->
        <property name="configLocation">
            <value>classpath:config/ibatis/sqlMapConfig.xml</value>
        </property>
        <property name="dataSource" ref="dataSource2"/>
    </bean>

    <!--<bean id="DaoImp" class="com.ibatis.DaoImp">-->
    <!--<property name="dataSource">-->
    <!--<ref bean="dataSource2"/>-->
    <!--</property>-->
    <!--<property name="sqlMapClient">-->
    <!--<ref bean="sqlMapClient"/>-->
    <!--</property>-->
    <!--</bean>-->
    <bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
        <constructor-arg>
            <ref bean="sqlMapClient"/>
        </constructor-arg>
    </bean>

    <bean id="daoImp" class="com.ibatis.DaoImp">
        <property name="sqlMapClientTemplate" ref="sqlMapClientTemplate"/>
    </bean>


    <bean id="transactionManagerforibatis"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource">
            <ref bean="dataSource2"/>
        </property>
    </bean>

    <bean id="transactionTempleteforibatis" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManagerforibatis"></property>
    </bean>
</beans>